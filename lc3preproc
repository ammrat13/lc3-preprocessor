#!/bin/perl


# PREAMBLE: ----------

use strict;
use warnings;

# We will be seeing a lot of recursive file processing
# It would be best to go as far as memory allows
no warnings qw(recursion);


# GLOBAL VARIABLES: ----------

# Hashes to keep track of the constants and macros
# Keeps track of the state of the preprocessor
my %consts = ();    # %($name => $value)
my %macros = ();    # %($name => %{params => @{params}, lines => @{lines}})

# Global configuration variables
my $inh = *STDIN;   # The input file handle
my $outh = *STDOUT; # The output file handle

# Also have a separate output file names
# Needed for cleanup and for opening
my $inn = undef;
my $outn = undef;


# FUNCTION PROTOTYPES: ----------

sub cleanup;
sub fail_out;
sub array_it;
sub file_it;
sub read_until;

sub parse_argv;
sub process_line;
sub process_directive;
sub process_lines;


# UTILITY FUNCTIONS: ----------

# cleanup()
#
# Essentially just closes the file handles.

sub cleanup {
    close $inh;     # Fail silently if we can't close
    close $outh;    # Usually because STDIN/OUT
}

# fail_out($err)
#
# Essentially a wrapper function for `die`. Also does cleanup when called.

sub fail_out {
    my ($err) = @_;

    cleanup;
    unlink $outn                    # Delete the output file on failure
        unless not defined $outn;
    die "$err\n";                   # Again, essentially a wrapper function
}                                   # Newline silences stack trace

# array_it(@xs)
#
# Returns a code pointer to a closure that serves as an iterator over `xs`. 
# Doesn't seem to be in Perl's default libraries. Simple enough to be rewritten
# here.

sub array_it {
    my (@xs) = @_;
    my $i = -1;         # Account for the fact we increment first
    return sub {
        $i++;           # Increment before the return statement since it stops
        return $xs[$i]; # execution of this closure
    };
}

# file_it($fh)
#
# Returns a code pointer to an iterator over the lines of the file `fh`. Note 
# that the file handle itself is passed rather than the file name. This 
# function is provided by default with Perl, but with different syntax. We wrap 
# it here for code reuse.

sub file_it {
    my ($fh) = @_;
    return sub {
        return <$fh>;       # We wrap the iterator for the file handle, simply 
    };                      # echoing its contents
}

# read_until($it, $arr, $end)
#
# Expects an iterator on strings as input. Reads from that iterator until a 
# line matching `$end` is hit or the iterator is exhausted. Appends the 
# resulting list into @$arr. Returns false if hit the end or true if iterator 
# was exhausted.

sub read_until {
    my ($it, $arr, $end) = @_;

    my $failure = 1;
    while(my $line = $it -> ()) {
        chomp $line;
        if($line =~ $end) {
            $failure = 0;
            last;
        } else {
            push @$arr, $line;
        }
    }

    return $failure;
}


# MAIN SUBROUTINES: ----------

# parse_argv()
#
# Void function that modifies global variables. Parses the command line 
# arguments supplied and sets the global variables accordingly. See `README.md`
# for more details. Note that it doesn't forbid having many of the same option,
# and it simply disregards all but the last one.

sub parse_argv {
    # Simply iterate over all the arguments
    # Note that we sometimes take another element inside the loop. This is 
    #   intended behavior as it allows us to take parameters to arguments 
    #   without having to mess with indices.

    my $arg_it = array_it(@ARGV);
    while(my $arg = $arg_it -> ()) {

        # Check for input file
        if($arg eq '-i') {
            # The next parameter should be the file name, so check that
            $inn = $arg_it -> ();
            defined $inn 
                or fail_out "Must provide filename after `-i` parameter";
        
        # Check for the output file
        } elsif($arg eq '-o') {
            # Again, get the next argument and do error checking
            $outn = $arg_it -> ();
            defined $outn 
                or fail_out "Must provide filename after `-o` parameter";

        # Default case if argument not recognized
        } else {
            fail_out "Unrecognized option $arg";
        }

    }

    # Actually open the files if we need to
    open $inh, '<', $inn 
        or fail_out "Unable to open input file '$inn'"
        unless not defined $inn;
    open $outh, '<', $outn 
        or fail_out "Unable to open output file '$outn'"
        unless not defined $outn;
}


# process_line($line)
#
# Processes a non-directive line `$line`. Will also do macro and constant 
# expansion based on the current state of the relavent hashes.

sub process_line {
    my ($line) = @_;
    chomp $line;

    # Check if the line is empty, just a comment, or a label
    # Note labels cannot start with a digit or dot
    # Capture the comment and label if possible
    if($line =~ /^([a-zA-Z_]?\w*)\s*((?:;.*)?)$/) {
        $outh -> say("$1 $2");
    
    # Otherwise, check that the line is of the proper form
    # All lines are an optional label, then a command, then paramters, then 
    #   an optional comment
    # We also account for quoted semicolons here
    # Again, make sure to capture everything
    } elsif($line =~ /^([a-zA-Z_]?\w*)\s+([a-zA-Z_.]\w*)\s*((?:"[^"]*"|[^;])*)((?:;.*)?)$/) {

        my $label = $1;
        my $command = $2;
        my $comment = $4;
        # Note that parameters can be quoted
        # Thus, we match ares not containing unquoted commas
        my @parameters = ($3 =~ /("[^"]*"|[^,]+)/);

        # Process constants, trimming them as well
        # We don't check that the parameters have no spaces
        foreach my $i (0 .. $#parameters) {
            # Trim
            $parameters[$i] =~ s/^\s*|\s*$//g;
            # Just substitute in if the constant exists
            # Remember, case insensitivity
            if(defined $consts{lc $parameters[$i]}) {
                $parameters[$i] = $consts{lc $parameters[$i]};
            }
        }

        # Process macros
        # Save the current state of the constants and substitute in local vars
        # This is what I meant when I said `%consts` keeps track of state
        if(defined $macros{$command}) {
            my @mps = @{%{$macros{$command}}{params}};
            my @mls = @{%{$macros{$command}}{lines}};

            # Check that we got the same number of parameters as needed
            if(scalar @parameters != scalar @mps) {
                fail_out "Incorrect number of parameters to macro on `$line`";
            }

            # Save the old state of the variables then set them to new
            # We essentially use `@saved` as our callstack
            my @saved = ();
            foreach my $i (0 .. $#mps) {
                # Case insensitivity
                push @saved, $consts{lc $mps[$i]};         # Okay if undefined
                $consts{lc $mps[$i]} = $parameters[$i];
            }

            # Process the lines in the macro
            process_lines array_it(@mls);

            # Restore state
            for my $i (0 .. $#mps) {
                # Again, case insensitivity
                if(defined $saved[$i]) {
                    # If we saved a value, reset it
                    $consts{lc $mps[$i]} = $saved[$i];
                } else {
                    # If it wasn't there before, delete it
                    delete $consts{lc $mps[$i]};
                }
            }

            # We already processed this line, so don't print
            return;
        }

        $outh -> say("$label $command ".(join ', ', @parameters)." $comment");

    # Line is not properly formatted
    } else {
        fail_out "Line incorrectly formatted $line";
    }
}

# process_directive($line, $line_it)
#
# Processes a line that is a directive. Note that it takes the libne iterator 
# as a parameter since it may need to advance it, for instance when parsing 
# macros.

sub process_directive {
    my ($line, $line_it) = @_;
    chomp $line;

    # Includes
    # Ensure there is only one parameter and capture it
    if($line =~ /^#include\s+(\S+)\s*$/i) {
        # Just open the file for processing and continue
        open my $inch, '<', $1 
            or fail_out "Unable to open included file '$1'";
        process_lines file_it($inch);

    # Constants
    # Capture the relavent values during the match
    } elsif($line =~ /^#constant\s+(\S+)\s+(.*)$/i) {
        # Use lowercase for case insensitivity
        $consts{lc $1} = $2;

    # Macros
    # Capture the name and parameter list
    } elsif($line =~ /^#macro\s+(\S+)\s+(.*)$/i) {

        # Save the matches for later
        my $mname = $1;
        my @ps = split /\s*,\s*/, ($2 =~ s/^\s*|\s*$//r);
        my @ls = ();

        # Read in-place and check that it succeeded
        if(read_until $line_it, \@ls, qr/^#endmacro\s*$/) {
            fail_out "Unclosed macro `$mname`";
        }

        $macros{$mname} = {
            params => \@ps,
            lines  => \@ls
        };

    # Unrecognized directive
    } else {
        fail_out "Unrecognized directive with `$line`";
    }
}


# process_lines($line_it)
#
# Takes in an iterator on the lines to process. It does its processing and 
# outputs them to the appropriate place. It is essentially a wrapper function 
# for `process_directive` and `process_line`.

sub process_lines {
    my ($line_it) = @_;
    while(my $line = $line_it -> ()) {
        # Check if the line is a preprocessor directive
        $line =~ /^#/ ? process_directive($line, $line_it) : process_line($line);
    }
}


# MAIN PROCEDURE: ----------

parse_argv;
process_lines file_it($inh);
cleanup;
